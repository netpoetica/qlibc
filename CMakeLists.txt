CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(qlibc C)

INCLUDE_DIRECTORIES(${qlibc_SOURCE_DIR}/include/qlibc)
INCLUDE_DIRECTORIES(${qlibc_SOURCE_DIR}/src/internal)
INCLUDE_DIRECTORIES(${qlibc_SOURCE_DIR}/src/internal/compat)

INCLUDE("config.cmake")

IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -include ${CMAKE_CURRENT_BINARY_DIR}/config.h")
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /FI ${CMAKE_CURRENT_BINARY_DIR}/config.h")
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "CLANG")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -include ${CMAKE_CURRENT_BINARY_DIR}/config.h")
ELSE()
    MESSAGE(FATAL_ERROR "Your compiler (${CMAKE_C_COMPILER_ID}) isn't supported yet")
ENDIF()

SET(SRC_SUBPATHS
        containers/*.c
        utilities/*.c
        ipc/*.c
        internal/*.c)

SET(SRC_SUBPATHS_EXT
        extensions/*.c)

SET(SRC_PATHS src src/os/compat)
SET(QLIBC_LINK_LIBS )
SET(QLIBC_EXT_LINK_LIBS qlibc)

IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET(SRC_PATHS ${SRC_PATHS} src/os/linux src/os/nix)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    SET(SRC_PATHS ${SRC_PATHS} src/os/windows)
	
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDISABLE_IPC -DDISABLE_QHTTPCLIENT -DDISABLE_QLOG")
	LIST(APPEND QLIBC_LINK_LIBS "ws2_32")
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    SET(SRC_PATHS ${SRC_PATHS} src/os/nix)
ENDIF()

#Add os-related source paths for qlibc
FOREACH(TMP_path IN LISTS SRC_PATHS)
    FOREACH(TMP_subpath IN LISTS SRC_SUBPATHS)
		LIST(APPEND SRC_SEARCH_PATHS "${TMP_path}/${TMP_subpath}")
    ENDFOREACH(TMP_subpath)
ENDFOREACH(TMP_path)

#Add os-related source paths files for qlibcext
FOREACH(TMP_path IN LISTS SRC_PATHS)
    FOREACH(TMP_subpath IN LISTS SRC_SUBPATHS_EXT)
		LIST(APPEND SRC_SEARCH_PATHS_EXT "${TMP_path}/${TMP_subpath}")
    ENDFOREACH(TMP_subpath)
ENDFOREACH(TMP_path)

FILE(GLOB_RECURSE SRC_LIB 
        ${SRC_SEARCH_PATHS})

FILE(GLOB_RECURSE SRC_LIB_EXT 
        ${SRC_SEARCH_PATHS_EXT})

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${qlibc_SOURCE_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${qlibc_SOURCE_DIR}/lib)

ADD_LIBRARY(qlibc-static STATIC ${SRC_LIB})
ADD_LIBRARY(qlibc SHARED ${SRC_LIB})

ADD_LIBRARY(qlibcext-static STATIC ${SRC_LIB_EXT})
ADD_LIBRARY(qlibcext SHARED ${SRC_LIB_EXT})

TARGET_LINK_LIBRARIES(qlibc ${QLIBC_LINK_LIBS})
TARGET_LINK_LIBRARIES(qlibcext ${QLIBC_EXT_LINK_LIBS})
